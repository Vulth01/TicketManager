@page "/userOverview"

@inject IDbContextFactory<BlazorApp1.Data.TicketContext> DbFactory
@inject NavigationManager NavigationManager

@using BlazorApp1.Models.Entities
@using Microsoft.EntityFrameworkCore

<style>
    th {
        white-space: nowrap;
    }
</style>

<h1>User Overview</h1>

@if (userAccounts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover mt-4">
        <thead class="table-dark">
        <th>Guid</th>
        <th>Id</th>
        <th>User Name</th>
        <th>Role</th>
        <th></th>
        </thead>
        <tbody>
            @foreach (var user in userAccounts)
            {
                <tr>
                    <td>@user.guid</td>
                    <td>@user.Id</td>
                    <td>@user.UserName</td>
                    <td>@user.Role</td>
                    <td>
                        <div class="d-flex">
                            <a class="btn btn-secondary me-2" role="button" href="@UserUrl(user.Id)">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger"
                                    data-bs-toggle="modal"
                                    data-bs-target="@GetDeleteModalId(user)">
                                <i class="bi bi-trash3"></i>
                            </button>
                        </div>
                        <DeleteUser User="@ConvertToSummary(user)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserAccount>? userAccounts;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        userAccounts = await context.UserAccounts.ToListAsync();
    }

    private static string UserUrl(int id) => $"/userAccount/{id}";
    private string GetDeleteModalId(UserAccount userAccount) => $"#{DeleteUser.GetModalId(ConvertToSummary(userAccount))}";

    private UserSummary ConvertToSummary(UserAccount userAccount)
    {
        return new UserSummary
        {
            guid = userAccount.guid,
            Id = userAccount.Id,
            UserName = userAccount.UserName,
            Role = userAccount.Role,
        };
    }



}
