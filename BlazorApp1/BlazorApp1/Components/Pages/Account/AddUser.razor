@page "/add-user"
@page "/userAccount/{id:int}"
@rendermode InteractiveServer
@inject IDbContextFactory<BlazorApp1.Data.TicketContext> DbFactory
@inject NavigationManager NavigationManager
@inject HashPasswordService hashPasswordService
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Administrator, Technician")]

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if (userAccount is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="@userAccount" FormName="editUser" OnValidSubmit="HandleSubmit">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="mb-3">
					<label for="userName" class="form-label">User Name:</label>
					<InputText id="userName" @bind-Value="userAccount.UserName" class="form-control" />
					<ValidationMessage For="() => userAccount.UserName" />
				</div>

				<div class="mb-3">
					<label for="password" class="form-label">Password:</label>
					<InputText id="password" @bind-Value="userAccount.Password" class="form-control" type="password" />
					<ValidationMessage For="() => userAccount.Password" />
				</div>

				<div class="mb-3">
					<label for="email" class="form-label">Email:</label>
					<InputText id="email" @bind-Value="userAccount.Email" class="form-control" type="email" />
					<ValidationMessage For="() => userAccount.Email" />
				</div>

				<div class="mb-3">
					<label for="role" class="form-label">Role:</label>
					<InputSelect id="role" @bind-Value="userAccount.Role" class="form-control">
						<option value="User">User</option>
						<option value="Administrator">Administrator</option>
						<option value="Technician">Technician</option>
					</InputSelect>
					<ValidationMessage For="() => userAccount.Role" />
				</div>

				<button type="submit" class="btn btn-primary">Save</button>
				<a role="button" href="/userOverview" class="btn btn-secondary">Cancel</a>
			</EditForm>
		</div>
	</div>
}

@code {
	[Parameter] public int? Id { get; set; }
	[SupplyParameterFromForm] private UserAccount? userAccount { get; set; }

	private string title = string.Empty;

	protected override void OnParametersSet()
	{
		// SET TITLE
		if (userAccount != null) return;

		if (Id != null)
		{
			using var context = DbFactory.CreateDbContext();
			userAccount = context.UserAccounts.FirstOrDefault(d => d.Id == Id.Value);

			title = userAccount != null ? $"ADvTECH Group | Edit User: {userAccount.UserName}" : "ADvTECH Group | User Not Found";
		}
		else
		{
			userAccount = new UserAccount { Role = "User" };
			title = "ADvTECH Group | New User";
		}
	}



	private async Task HandleSubmit()
	{
		ArgumentNullException.ThrowIfNull(userAccount);

		using var context = DbFactory.CreateDbContext();

		// HASH PASSWORD
		if (!string.IsNullOrWhiteSpace(userAccount.Password))
		{
			string saltBase64;
			string hashedPassword = hashPasswordService.HashPassword(userAccount.Password, out saltBase64);
			userAccount.Password = hashedPassword;
			userAccount.Salt = Convert.FromBase64String(saltBase64);
		}

		if (Id is null)
		{
			context.UserAccounts.Add(userAccount);
		}
		else
		{
			context.UserAccounts.Update(userAccount);
		}

		await context.SaveChangesAsync();
		NavigationManager.NavigateTo("/userOverview");
	}
}
