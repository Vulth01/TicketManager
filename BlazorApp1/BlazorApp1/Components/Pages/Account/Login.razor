@page "/login"
@inject TicketContext ticketContext
@inject NavigationManager navigationManager
@inject HashPasswordService hashPasswordService

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" style="max-height:5rem;" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" autofocus />
                <ValidationMessage For="()=>Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="()=>Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        // Retrieve the user account by username or email
        var userAccount = ticketContext.UserAccounts
            .Where(x => x.UserName == Model.UserName || x.Email == Model.UserName)
            .FirstOrDefault();

        // If user account is not found, show error and return early
        if (userAccount is null)
        {
            errorMessage = "Incorrect username or password";
            return;
        }

        // Now that the user is found, retrieve the stored salt from the database
        var storedSaltBase64FromDb = Convert.ToBase64String(userAccount.Salt);

        // Verify the password entered by the user by comparing hashes
        bool passwordMatches = hashPasswordService.VerifyPassword(Model.Password, userAccount.Password, storedSaltBase64FromDb);

        if (!passwordMatches)
        {
            errorMessage = "Incorrect username or password";
            return;
        }

        // Create authentication claims
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, userAccount.UserName),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        // Sign in the user and navigate to the home page
        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}

@* admin123 - admin123 *@