@page "/login"
@inject TicketContext ticketContext
@inject NavigationManager navigationManager






<div class="row">

	@* LOGIN FORM *@
	<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
		<EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
			<DataAnnotationsValidator/>

			@* HEADER IMAGE & TEXT *@
			<div class="mb-3 text-center flex-column">
				<img src="/images/avatar.png" style="max-height:5rem;"/>
				<h3>LOGIN</h3>
			</div>

			@* INPUT USERNAME *@
			<div class="mb-3">
				<label>User Name</label>
				<InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" autofocus/>
				<ValidationMessage For="()=>Model.UserName"/>
			</div>

			@* INPUT PASSWORD *@
			<div class="mb-3">
				<label>Password</label>
				<InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
				<ValidationMessage For="()=>Model.Password" />
			</div>

			<div class="mb-3 text-center">
				<span class="text-danger">@errorMessage</span>
			</div>

			@* LOGIN BUTTON *@
			<div class="mb-3 d-grid gap-2">
				<button type="submit" class="btn btn-primary">Login</button>
			</div>
		</EditForm>
	</div>
</div>






@code {
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	[SupplyParameterFromForm]
	public LoginViewModel Model { get; set; } = new();

	private string? errorMessage;

	// AUTHENTICATION & LOGIN
	private async Task Authenticate()
	{
		// Check if the input is an email or a username.
		var userAccount = ticketContext.UserAccounts
			.Where(x => x.UserName == Model.UserName || x.Email == Model.UserName)
			.FirstOrDefault();

		// If invalid
		if (userAccount is null || userAccount.Password != Model.Password)
		{
			errorMessage = "Invalid username or password";
			return;
		}

		var claims = new List<Claim>
		{
			new Claim(ClaimTypes.Name, userAccount.UserName),
            new Claim(ClaimTypes.Role, userAccount.Role)
		};

		var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
		var principal = new ClaimsPrincipal(identity);
		await HttpContext.SignInAsync(principal);

		navigationManager.NavigateTo("/");
	}
}

