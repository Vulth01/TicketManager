@page "/documentdetails/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorApp1.Data.TicketContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>DocumentDetails</h2>
<hr />
@if (DocumentDetails is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="DocumentDetails" OnValidSubmit="UpdateDocumentDetails" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <div class="mb-3">
                    <label for="brand" class="form-label">Brand:</label>
                    <InputText id="brand" @bind-Value="DocumentDetails.Brand" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.Brand" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="campus" class="form-label">Campus:</label>
                    <InputText id="campus" @bind-Value="DocumentDetails.Campus" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.Campus" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="username" class="form-label">UserName:</label>
                    <InputText id="username" @bind-Value="DocumentDetails.UserName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.UserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="useremail" class="form-label">UserEmail:</label>
                    <InputText id="useremail" @bind-Value="DocumentDetails.UserEmail" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.UserEmail" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="usercontactnumber" class="form-label">UserContactNumber:</label>
                    <InputText id="usercontactnumber" @bind-Value="DocumentDetails.UserContactNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.UserContactNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="primarycontact" class="form-label">PrimaryContact:</label>
                    <InputCheckbox id="primarycontact" @bind-Value="DocumentDetails.PrimaryContact" class="form-check-input" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.PrimaryContact" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="troubleshootername" class="form-label">TroubleshooterName:</label>
                    <InputText id="troubleshootername" @bind-Value="DocumentDetails.TroubleshooterName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.TroubleshooterName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="troubleshooteremail" class="form-label">TroubleshooterEmail:</label>
                    <InputText id="troubleshooteremail" @bind-Value="DocumentDetails.TroubleshooterEmail" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.TroubleshooterEmail" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="troubleshootercontactnumber" class="form-label">TroubleshooterContactNumber:</label>
                    <InputText id="troubleshootercontactnumber" @bind-Value="DocumentDetails.TroubleshooterContactNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.TroubleshooterContactNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="siteaddress" class="form-label">SiteAddress:</label>
                    <InputText id="siteaddress" @bind-Value="DocumentDetails.SiteAddress" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.SiteAddress" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="equipmentmake" class="form-label">EquipmentMake:</label>
                    <InputText id="equipmentmake" @bind-Value="DocumentDetails.EquipmentMake" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.EquipmentMake" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="equipmentmodel" class="form-label">EquipmentModel:</label>
                    <InputText id="equipmentmodel" @bind-Value="DocumentDetails.EquipmentModel" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.EquipmentModel" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="equipmentproductnumber" class="form-label">EquipmentProductNumber:</label>
                    <InputText id="equipmentproductnumber" @bind-Value="DocumentDetails.EquipmentProductNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.EquipmentProductNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="equipmentserialnumber" class="form-label">EquipmentSerialNumber:</label>
                    <InputText id="equipmentserialnumber" @bind-Value="DocumentDetails.EquipmentSerialNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.EquipmentSerialNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="faultdescription" class="form-label">FaultDescription:</label>
                    <InputText id="faultdescription" @bind-Value="DocumentDetails.FaultDescription" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DocumentDetails.FaultDescription" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/documentdetails">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private DocumentDetails? DocumentDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        DocumentDetails ??= await context.DocumentDetails.FirstOrDefaultAsync(m => m.Id == Id);

        if (DocumentDetails is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateDocumentDetails()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(DocumentDetails!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DocumentDetailsExists(DocumentDetails!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/documentdetails");
    }

    private bool DocumentDetailsExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.DocumentDetails.Any(e => e.Id == id);
    }
}
