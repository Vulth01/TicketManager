@page "/documentdetails/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorApp1.Data.TicketContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>DocumentDetails</h2>
    <hr />
    @if (documentdetails is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">guid</dt>
            <dd class="col-sm-10">@documentdetails.guid</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Brand</dt>
            <dd class="col-sm-10">@documentdetails.Brand</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Campus</dt>
            <dd class="col-sm-10">@documentdetails.Campus</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserName</dt>
            <dd class="col-sm-10">@documentdetails.UserName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserEmail</dt>
            <dd class="col-sm-10">@documentdetails.UserEmail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserContactNumber</dt>
            <dd class="col-sm-10">@documentdetails.UserContactNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PrimaryContact</dt>
            <dd class="col-sm-10">@documentdetails.PrimaryContact</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TroubleshooterName</dt>
            <dd class="col-sm-10">@documentdetails.TroubleshooterName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TroubleshooterEmail</dt>
            <dd class="col-sm-10">@documentdetails.TroubleshooterEmail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TroubleshooterContactNumber</dt>
            <dd class="col-sm-10">@documentdetails.TroubleshooterContactNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SiteAddress</dt>
            <dd class="col-sm-10">@documentdetails.SiteAddress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EquipmentMake</dt>
            <dd class="col-sm-10">@documentdetails.EquipmentMake</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EquipmentModel</dt>
            <dd class="col-sm-10">@documentdetails.EquipmentModel</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EquipmentProductNumber</dt>
            <dd class="col-sm-10">@documentdetails.EquipmentProductNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EquipmentSerialNumber</dt>
            <dd class="col-sm-10">@documentdetails.EquipmentSerialNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FaultDescription</dt>
            <dd class="col-sm-10">@documentdetails.FaultDescription</dd>
        </dl>
        <EditForm method="post" Model="documentdetails" OnValidSubmit="DeleteDocumentDetails" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(documentdetails is null)">Delete</button> |
            <a href="/documentdetails">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private DocumentDetails? documentdetails;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        documentdetails = await context.DocumentDetails.FirstOrDefaultAsync(m => m.Id == Id);

        if (documentdetails is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDocumentDetails()
    {
        using var context = DbFactory.CreateDbContext();
        context.DocumentDetails.Remove(documentdetails!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/documentdetails");
    }
}
